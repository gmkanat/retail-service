version: "3.8"

services:
  cart:
    container_name: cart
    build:
      context: .
      dockerfile: ./cart/Dockerfile
    
    ports:
      - "8082:8082"
    environment:
      - BASE_URL=http://route256.pavl.uk:8080
      - TOKEN=testtoken
      - PORT=0.0.0.0:8082
      - MAX_RETRIES=3
      - INITIAL_BACKOFF=500ms
      - LOMS_ADDR=loms:50051
      - RATE_LIMIT=10
      - BURST_LIMIT=10
    networks:
      - backend
    depends_on:
      - loms
  
  loms:
    container_name: loms
    build:
      context: .
      dockerfile: ./loms/Dockerfile
    ports:
      - "50051:50051" # grpc
      - "8088:8088" # grpc gateway
    environment:
      - LOMS_GRPC_PORT=0.0.0.0:50051
      - LOMS_HTTP_PORT=0.0.0.0:8088
      - LOMS_STOCK_FILE=/loms/stock-data.json
      - LOMS_SWAGGER_FILE=/loms/loms.swagger.json
      - LOMS_MASTER_DB_URL=postgresql://loms_user:loms_password@pg_master:5432/loms_db?sslmode=disable
      - LOMS_SLAVE_DB_URL=postgresql://loms_user:loms_password@pg_slave:5432/loms_db?sslmode=disable
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC=loms.order-events
      - DISPATCHER_TICK=5s
      - DISPATCHER_BATCH_SIZE=3
      - LOMS_OUTBOX_POLL_INTERVAL=10s
    networks:
      - backend
    depends_on:
      pg_master:
        condition: service_healthy
      pg_slave:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      
  pg_master:
    container_name: pg_master
    image: bitnami/postgresql:latest
    restart: always
    environment:
      - POSTGRESQL_DATABASE=loms_db
      - POSTGRESQL_USERNAME=loms_user
      - POSTGRESQL_PASSWORD=loms_password
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_SYNCHRONOUS_STANDBY_NAMES=pg_slave
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - loms_master_data:/var/lib/postgresql/loms_data
    networks:
      - backend
  
  pg_slave:
    container_name: pg_slave
    image: bitnami/postgresql:latest
    depends_on:
      pg_master:
        condition: service_healthy
    restart: always
    environment:
      - POSTGRESQL_DATABASE=loms_db
      - POSTGRESQL_USERNAME=loms_user
      - POSTGRESQL_PASSWORD=loms_password
      - POSTGRESQL_PGAUDIT_LOG=READ
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_user
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_MASTER_HOST=pg_master
      - POSTGRESQL_STANDBY_MODE=synchronous
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - loms_slave_data:/var/lib/postgresql/loms_data
    networks:
      - backend
  migration:
    container_name: migration
    image: alpine/curl:latest
    depends_on:
      pg_master:
        condition: service_healthy
      pg_slave:
        condition: service_healthy
    environment:
      - POSTGRES_USER=loms_user
      - POSTGRES_PASSWORD=loms_password
      - POSTGRES_DB=loms_db
      - POSTGRES_HOST=pg_master
    volumes:
      - ./loms/migrations:/migrations
    entrypoint:
      - /bin/sh
      - -c
      - |
        curl -fsSL https://raw.githubusercontent.com/pressly/goose/master/install.sh | sh && 
        goose -dir=/migrations postgres "postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@$${POSTGRES_HOST}:5432/$${POSTGRES_DB}?sslmode=disable" up
    networks:
      - backend 
  
  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - '29092'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - backend

  init-kafka:
    container_name: init-kafka
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics.sh --bootstrap-server kafka:29092 --list

      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --replication-factor 1 --partitions 2 --topic loms.order-events

      echo 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:29092 --list
      "
    networks:
      - backend

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8089:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - backend
  
  notifier:
    build:
      context: .
      dockerfile: ./notifier/Dockerfile
    deploy:
      replicas: 3
    environment:
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC=loms.order-events
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
    networks:
      - backend

volumes:
  loms_master_data:
  loms_slave_data:

networks:
  backend:
    driver: bridge

