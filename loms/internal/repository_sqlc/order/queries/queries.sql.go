// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgordersqry

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders.orders (user_id, status, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateOrderParams struct {
	UserID    int64
	Status    OrdersOrderStatus
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOrderWithItems = `-- name: GetOrderWithItems :many
SELECT
  o.id, o.user_id, o.status, o.created_at, o.updated_at,
  CAST(COALESCE(oi.sku_id, 0) AS BIGINT) AS sku_id,
  CAST(COALESCE(oi.count, 0) AS BIGINT) AS count
FROM
  orders.orders o
    LEFT JOIN
  orders.order_items oi ON o.id = oi.order_id
WHERE
  o.id = $1
`

type GetOrderWithItemsRow struct {
	ID        int64
	UserID    int64
	Status    OrdersOrderStatus
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	SkuID     int64
	Count     int64
}

func (q *Queries) GetOrderWithItems(ctx context.Context, id int64) ([]GetOrderWithItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderWithItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderWithItemsRow
	for rows.Next() {
		var i GetOrderWithItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SkuID,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO orders.order_items (sku_id, order_id, count, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type InsertOrderItemParams struct {
	SkuID     int64
	OrderID   int64
	Count     int64
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderItem,
		arg.SkuID,
		arg.OrderID,
		arg.Count,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders.orders
SET status = $2, updated_at = $3
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID        int64
	Status    OrdersOrderStatus
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
