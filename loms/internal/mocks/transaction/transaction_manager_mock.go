// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package transaction

//go:generate minimock -i gitlab.ozon.dev/kanat_9999/homework/loms/internal/service/order.TransactionManager -o transaction_manager_mock.go -n TransactionManagerMock -p transaction

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TransactionManagerMock implements mm_order.TransactionManager
type TransactionManagerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcWithRepeatableReadTx          func(ctx context.Context, fn func(ctx context.Context) error) (err error)
	funcWithRepeatableReadTxOrigin    string
	inspectFuncWithRepeatableReadTx   func(ctx context.Context, fn func(ctx context.Context) error)
	afterWithRepeatableReadTxCounter  uint64
	beforeWithRepeatableReadTxCounter uint64
	WithRepeatableReadTxMock          mTransactionManagerMockWithRepeatableReadTx
}

// NewTransactionManagerMock returns a mock for mm_order.TransactionManager
func NewTransactionManagerMock(t minimock.Tester) *TransactionManagerMock {
	m := &TransactionManagerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WithRepeatableReadTxMock = mTransactionManagerMockWithRepeatableReadTx{mock: m}
	m.WithRepeatableReadTxMock.callArgs = []*TransactionManagerMockWithRepeatableReadTxParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTransactionManagerMockWithRepeatableReadTx struct {
	optional           bool
	mock               *TransactionManagerMock
	defaultExpectation *TransactionManagerMockWithRepeatableReadTxExpectation
	expectations       []*TransactionManagerMockWithRepeatableReadTxExpectation

	callArgs []*TransactionManagerMockWithRepeatableReadTxParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TransactionManagerMockWithRepeatableReadTxExpectation specifies expectation struct of the TransactionManager.WithRepeatableReadTx
type TransactionManagerMockWithRepeatableReadTxExpectation struct {
	mock               *TransactionManagerMock
	params             *TransactionManagerMockWithRepeatableReadTxParams
	paramPtrs          *TransactionManagerMockWithRepeatableReadTxParamPtrs
	expectationOrigins TransactionManagerMockWithRepeatableReadTxExpectationOrigins
	results            *TransactionManagerMockWithRepeatableReadTxResults
	returnOrigin       string
	Counter            uint64
}

// TransactionManagerMockWithRepeatableReadTxParams contains parameters of the TransactionManager.WithRepeatableReadTx
type TransactionManagerMockWithRepeatableReadTxParams struct {
	ctx context.Context
	fn  func(ctx context.Context) error
}

// TransactionManagerMockWithRepeatableReadTxParamPtrs contains pointers to parameters of the TransactionManager.WithRepeatableReadTx
type TransactionManagerMockWithRepeatableReadTxParamPtrs struct {
	ctx *context.Context
	fn  *func(ctx context.Context) error
}

// TransactionManagerMockWithRepeatableReadTxResults contains results of the TransactionManager.WithRepeatableReadTx
type TransactionManagerMockWithRepeatableReadTxResults struct {
	err error
}

// TransactionManagerMockWithRepeatableReadTxOrigins contains origins of expectations of the TransactionManager.WithRepeatableReadTx
type TransactionManagerMockWithRepeatableReadTxExpectationOrigins struct {
	origin    string
	originCtx string
	originFn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) Optional() *mTransactionManagerMockWithRepeatableReadTx {
	mmWithRepeatableReadTx.optional = true
	return mmWithRepeatableReadTx
}

// Expect sets up expected params for TransactionManager.WithRepeatableReadTx
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) Expect(ctx context.Context, fn func(ctx context.Context) error) *mTransactionManagerMockWithRepeatableReadTx {
	if mmWithRepeatableReadTx.mock.funcWithRepeatableReadTx != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by Set")
	}

	if mmWithRepeatableReadTx.defaultExpectation == nil {
		mmWithRepeatableReadTx.defaultExpectation = &TransactionManagerMockWithRepeatableReadTxExpectation{}
	}

	if mmWithRepeatableReadTx.defaultExpectation.paramPtrs != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by ExpectParams functions")
	}

	mmWithRepeatableReadTx.defaultExpectation.params = &TransactionManagerMockWithRepeatableReadTxParams{ctx, fn}
	mmWithRepeatableReadTx.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWithRepeatableReadTx.expectations {
		if minimock.Equal(e.params, mmWithRepeatableReadTx.defaultExpectation.params) {
			mmWithRepeatableReadTx.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWithRepeatableReadTx.defaultExpectation.params)
		}
	}

	return mmWithRepeatableReadTx
}

// ExpectCtxParam1 sets up expected param ctx for TransactionManager.WithRepeatableReadTx
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) ExpectCtxParam1(ctx context.Context) *mTransactionManagerMockWithRepeatableReadTx {
	if mmWithRepeatableReadTx.mock.funcWithRepeatableReadTx != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by Set")
	}

	if mmWithRepeatableReadTx.defaultExpectation == nil {
		mmWithRepeatableReadTx.defaultExpectation = &TransactionManagerMockWithRepeatableReadTxExpectation{}
	}

	if mmWithRepeatableReadTx.defaultExpectation.params != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by Expect")
	}

	if mmWithRepeatableReadTx.defaultExpectation.paramPtrs == nil {
		mmWithRepeatableReadTx.defaultExpectation.paramPtrs = &TransactionManagerMockWithRepeatableReadTxParamPtrs{}
	}
	mmWithRepeatableReadTx.defaultExpectation.paramPtrs.ctx = &ctx
	mmWithRepeatableReadTx.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWithRepeatableReadTx
}

// ExpectFnParam2 sets up expected param fn for TransactionManager.WithRepeatableReadTx
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) ExpectFnParam2(fn func(ctx context.Context) error) *mTransactionManagerMockWithRepeatableReadTx {
	if mmWithRepeatableReadTx.mock.funcWithRepeatableReadTx != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by Set")
	}

	if mmWithRepeatableReadTx.defaultExpectation == nil {
		mmWithRepeatableReadTx.defaultExpectation = &TransactionManagerMockWithRepeatableReadTxExpectation{}
	}

	if mmWithRepeatableReadTx.defaultExpectation.params != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by Expect")
	}

	if mmWithRepeatableReadTx.defaultExpectation.paramPtrs == nil {
		mmWithRepeatableReadTx.defaultExpectation.paramPtrs = &TransactionManagerMockWithRepeatableReadTxParamPtrs{}
	}
	mmWithRepeatableReadTx.defaultExpectation.paramPtrs.fn = &fn
	mmWithRepeatableReadTx.defaultExpectation.expectationOrigins.originFn = minimock.CallerInfo(1)

	return mmWithRepeatableReadTx
}

// Inspect accepts an inspector function that has same arguments as the TransactionManager.WithRepeatableReadTx
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) Inspect(f func(ctx context.Context, fn func(ctx context.Context) error)) *mTransactionManagerMockWithRepeatableReadTx {
	if mmWithRepeatableReadTx.mock.inspectFuncWithRepeatableReadTx != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("Inspect function is already set for TransactionManagerMock.WithRepeatableReadTx")
	}

	mmWithRepeatableReadTx.mock.inspectFuncWithRepeatableReadTx = f

	return mmWithRepeatableReadTx
}

// Return sets up results that will be returned by TransactionManager.WithRepeatableReadTx
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) Return(err error) *TransactionManagerMock {
	if mmWithRepeatableReadTx.mock.funcWithRepeatableReadTx != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by Set")
	}

	if mmWithRepeatableReadTx.defaultExpectation == nil {
		mmWithRepeatableReadTx.defaultExpectation = &TransactionManagerMockWithRepeatableReadTxExpectation{mock: mmWithRepeatableReadTx.mock}
	}
	mmWithRepeatableReadTx.defaultExpectation.results = &TransactionManagerMockWithRepeatableReadTxResults{err}
	mmWithRepeatableReadTx.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWithRepeatableReadTx.mock
}

// Set uses given function f to mock the TransactionManager.WithRepeatableReadTx method
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) Set(f func(ctx context.Context, fn func(ctx context.Context) error) (err error)) *TransactionManagerMock {
	if mmWithRepeatableReadTx.defaultExpectation != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("Default expectation is already set for the TransactionManager.WithRepeatableReadTx method")
	}

	if len(mmWithRepeatableReadTx.expectations) > 0 {
		mmWithRepeatableReadTx.mock.t.Fatalf("Some expectations are already set for the TransactionManager.WithRepeatableReadTx method")
	}

	mmWithRepeatableReadTx.mock.funcWithRepeatableReadTx = f
	mmWithRepeatableReadTx.mock.funcWithRepeatableReadTxOrigin = minimock.CallerInfo(1)
	return mmWithRepeatableReadTx.mock
}

// When sets expectation for the TransactionManager.WithRepeatableReadTx which will trigger the result defined by the following
// Then helper
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) When(ctx context.Context, fn func(ctx context.Context) error) *TransactionManagerMockWithRepeatableReadTxExpectation {
	if mmWithRepeatableReadTx.mock.funcWithRepeatableReadTx != nil {
		mmWithRepeatableReadTx.mock.t.Fatalf("TransactionManagerMock.WithRepeatableReadTx mock is already set by Set")
	}

	expectation := &TransactionManagerMockWithRepeatableReadTxExpectation{
		mock:               mmWithRepeatableReadTx.mock,
		params:             &TransactionManagerMockWithRepeatableReadTxParams{ctx, fn},
		expectationOrigins: TransactionManagerMockWithRepeatableReadTxExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWithRepeatableReadTx.expectations = append(mmWithRepeatableReadTx.expectations, expectation)
	return expectation
}

// Then sets up TransactionManager.WithRepeatableReadTx return parameters for the expectation previously defined by the When method
func (e *TransactionManagerMockWithRepeatableReadTxExpectation) Then(err error) *TransactionManagerMock {
	e.results = &TransactionManagerMockWithRepeatableReadTxResults{err}
	return e.mock
}

// Times sets number of times TransactionManager.WithRepeatableReadTx should be invoked
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) Times(n uint64) *mTransactionManagerMockWithRepeatableReadTx {
	if n == 0 {
		mmWithRepeatableReadTx.mock.t.Fatalf("Times of TransactionManagerMock.WithRepeatableReadTx mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWithRepeatableReadTx.expectedInvocations, n)
	mmWithRepeatableReadTx.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWithRepeatableReadTx
}

func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) invocationsDone() bool {
	if len(mmWithRepeatableReadTx.expectations) == 0 && mmWithRepeatableReadTx.defaultExpectation == nil && mmWithRepeatableReadTx.mock.funcWithRepeatableReadTx == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWithRepeatableReadTx.mock.afterWithRepeatableReadTxCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWithRepeatableReadTx.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WithRepeatableReadTx implements mm_order.TransactionManager
func (mmWithRepeatableReadTx *TransactionManagerMock) WithRepeatableReadTx(ctx context.Context, fn func(ctx context.Context) error) (err error) {
	mm_atomic.AddUint64(&mmWithRepeatableReadTx.beforeWithRepeatableReadTxCounter, 1)
	defer mm_atomic.AddUint64(&mmWithRepeatableReadTx.afterWithRepeatableReadTxCounter, 1)

	mmWithRepeatableReadTx.t.Helper()

	if mmWithRepeatableReadTx.inspectFuncWithRepeatableReadTx != nil {
		mmWithRepeatableReadTx.inspectFuncWithRepeatableReadTx(ctx, fn)
	}

	mm_params := TransactionManagerMockWithRepeatableReadTxParams{ctx, fn}

	// Record call args
	mmWithRepeatableReadTx.WithRepeatableReadTxMock.mutex.Lock()
	mmWithRepeatableReadTx.WithRepeatableReadTxMock.callArgs = append(mmWithRepeatableReadTx.WithRepeatableReadTxMock.callArgs, &mm_params)
	mmWithRepeatableReadTx.WithRepeatableReadTxMock.mutex.Unlock()

	for _, e := range mmWithRepeatableReadTx.WithRepeatableReadTxMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation.Counter, 1)
		mm_want := mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation.params
		mm_want_ptrs := mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation.paramPtrs

		mm_got := TransactionManagerMockWithRepeatableReadTxParams{ctx, fn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWithRepeatableReadTx.t.Errorf("TransactionManagerMock.WithRepeatableReadTx got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.fn != nil && !minimock.Equal(*mm_want_ptrs.fn, mm_got.fn) {
				mmWithRepeatableReadTx.t.Errorf("TransactionManagerMock.WithRepeatableReadTx got unexpected parameter fn, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation.expectationOrigins.originFn, *mm_want_ptrs.fn, mm_got.fn, minimock.Diff(*mm_want_ptrs.fn, mm_got.fn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWithRepeatableReadTx.t.Errorf("TransactionManagerMock.WithRepeatableReadTx got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWithRepeatableReadTx.WithRepeatableReadTxMock.defaultExpectation.results
		if mm_results == nil {
			mmWithRepeatableReadTx.t.Fatal("No results are set for the TransactionManagerMock.WithRepeatableReadTx")
		}
		return (*mm_results).err
	}
	if mmWithRepeatableReadTx.funcWithRepeatableReadTx != nil {
		return mmWithRepeatableReadTx.funcWithRepeatableReadTx(ctx, fn)
	}
	mmWithRepeatableReadTx.t.Fatalf("Unexpected call to TransactionManagerMock.WithRepeatableReadTx. %v %v", ctx, fn)
	return
}

// WithRepeatableReadTxAfterCounter returns a count of finished TransactionManagerMock.WithRepeatableReadTx invocations
func (mmWithRepeatableReadTx *TransactionManagerMock) WithRepeatableReadTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithRepeatableReadTx.afterWithRepeatableReadTxCounter)
}

// WithRepeatableReadTxBeforeCounter returns a count of TransactionManagerMock.WithRepeatableReadTx invocations
func (mmWithRepeatableReadTx *TransactionManagerMock) WithRepeatableReadTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithRepeatableReadTx.beforeWithRepeatableReadTxCounter)
}

// Calls returns a list of arguments used in each call to TransactionManagerMock.WithRepeatableReadTx.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWithRepeatableReadTx *mTransactionManagerMockWithRepeatableReadTx) Calls() []*TransactionManagerMockWithRepeatableReadTxParams {
	mmWithRepeatableReadTx.mutex.RLock()

	argCopy := make([]*TransactionManagerMockWithRepeatableReadTxParams, len(mmWithRepeatableReadTx.callArgs))
	copy(argCopy, mmWithRepeatableReadTx.callArgs)

	mmWithRepeatableReadTx.mutex.RUnlock()

	return argCopy
}

// MinimockWithRepeatableReadTxDone returns true if the count of the WithRepeatableReadTx invocations corresponds
// the number of defined expectations
func (m *TransactionManagerMock) MinimockWithRepeatableReadTxDone() bool {
	if m.WithRepeatableReadTxMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WithRepeatableReadTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WithRepeatableReadTxMock.invocationsDone()
}

// MinimockWithRepeatableReadTxInspect logs each unmet expectation
func (m *TransactionManagerMock) MinimockWithRepeatableReadTxInspect() {
	for _, e := range m.WithRepeatableReadTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionManagerMock.WithRepeatableReadTx at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWithRepeatableReadTxCounter := mm_atomic.LoadUint64(&m.afterWithRepeatableReadTxCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WithRepeatableReadTxMock.defaultExpectation != nil && afterWithRepeatableReadTxCounter < 1 {
		if m.WithRepeatableReadTxMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TransactionManagerMock.WithRepeatableReadTx at\n%s", m.WithRepeatableReadTxMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TransactionManagerMock.WithRepeatableReadTx at\n%s with params: %#v", m.WithRepeatableReadTxMock.defaultExpectation.expectationOrigins.origin, *m.WithRepeatableReadTxMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWithRepeatableReadTx != nil && afterWithRepeatableReadTxCounter < 1 {
		m.t.Errorf("Expected call to TransactionManagerMock.WithRepeatableReadTx at\n%s", m.funcWithRepeatableReadTxOrigin)
	}

	if !m.WithRepeatableReadTxMock.invocationsDone() && afterWithRepeatableReadTxCounter > 0 {
		m.t.Errorf("Expected %d calls to TransactionManagerMock.WithRepeatableReadTx at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WithRepeatableReadTxMock.expectedInvocations), m.WithRepeatableReadTxMock.expectedInvocationsOrigin, afterWithRepeatableReadTxCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransactionManagerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockWithRepeatableReadTxInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransactionManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransactionManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWithRepeatableReadTxDone()
}
